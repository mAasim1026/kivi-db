#include <arpa/inet.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define PORT 8090
#define BUFFER_SIZE 1024
#define BACKLOG_QUEUE_SIZE 100

struct client_data {
  int socket_fd;
  struct sockaddr_in address;
};

// worker thread to handle connected clients
void *worker(void *args) {

  struct client_data *client = (struct client_data*) args;

  int new_socket = client->socket_fd;

  char buffer[BUFFER_SIZE] = {0};

  const char *request = "hello";
  const char *response = "world";

  // printf("accepted client no. %d\n", count + 1);
  // count++;

  // read client data
  int bytes_read = read(new_socket, buffer, BUFFER_SIZE);
  buffer[bytes_read] = '\0';

  printf("recv from client: %s\n", buffer);

  // check if the client sent "hello"
  if (strcmp(buffer, request) == 0) {
    // send response to client
    send(new_socket, response, strlen(response), 0);
    printf("sent response to client: %s\n", response);
  }

  // closing client connection in loop`
  close(new_socket);
  printf("connection closed in loop\n");

  return NULL;
}

int main(int argc, char const *argv[]) {

  // create fds and socket addr
  int server_fd, new_socket;
  struct sockaddr_in address;

  int addrlen = sizeof(address);

  // create socket
  if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("socket failed");
    exit(1);
  }

  address.sin_family = AF_INET;
  address.sin_addr.s_addr = INADDR_ANY;
  address.sin_port = htons(PORT);

  // binding socket to a port (8080)
  if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
    perror("bind failed");
    close(server_fd);
    exit(1);
  }

  if (listen(server_fd, BACKLOG_QUEUE_SIZE) < 0) {
    perror("listen failed");
    close(server_fd);
    exit(1);
  }

  printf("server listening on port %d\n", PORT);

  int count = 0;

  // accepting connections
  while (1) {

    struct client_data *client = malloc(sizeof(struct client_data));

    // accept client and setup connection
    if ((client->socket_fd =
             accept(server_fd, (struct sockaddr *)&client->address,
                    (socklen_t *)&addrlen)) < 0) {
      perror("accept failed");
      close(server_fd);
      exit(1);
    }

    // create a new thread to handle client connection
    pthread_t client_thread;
    if (pthread_create(&client_thread, NULL, &worker, (void *)client) != 0) {
      perror("thread creation failed\n");
      free(client);
      close(server_fd);
      exit(1);
    }

    // detach thread so that it cleans up itself
    pthread_detach(client_thread);
  }

  return 0;
}
